import { AllowedComponentProps, VNodeProps, type Component, type ComputedOptions, type MethodOptions } from "vue";
export interface ModalState {
    action: {
        show: (modalId: string, args?: any) => void;
        hide: (modalId: string) => void;
        remove: (modalId: string) => void;
        getModalId: (modal: any) => any;
        register: (id: string, comp: any, args: any) => void;
    };
    store: {
        [id: string]: {
            comp: Component<any, any, any, ComputedOptions, MethodOptions>;
            args?: ModalArgs;
            visible: boolean;
        };
    };
    modalPromise: {
        [id: string]: {
            promise: Promise<unknown>;
            resolve: (args?: unknown) => void;
            reject: (args?: unknown) => void;
        };
    };
}
export declare type ModalArgs = any;
export declare type ComponentConstructor<T> = {
    new (): T;
};
export declare type ComponentProps<C extends Component> = C extends new (...args: any) => any ? Omit<InstanceType<C>["$props"], keyof VNodeProps | keyof AllowedComponentProps> : never;
export declare const ModalStateToken: unique symbol;
export declare const ModalIdToken: unique symbol;
export declare const modalContext: () => Partial<ModalState>;
export declare const modalIdContext: () => string;
