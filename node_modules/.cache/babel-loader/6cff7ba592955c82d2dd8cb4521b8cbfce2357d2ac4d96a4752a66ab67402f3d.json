{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar isApiSetUp = false;\n\n/**\n * @param apiKey    API Key, or object with the URL parameters. For example\n *                  to use Google Maps Premium API, pass\n *                    `{ client: <YOUR-CLIENT-ID> }`.\n *                  You may pass the libraries and/or version (as `v`) parameter into\n *                  this parameter and skip the next two parameters\n * @param version   Google Maps version\n * @param libraries Libraries to load (@see\n *                  https://developers.google.com/maps/documentation/javascript/libraries)\n * @param loadCn    Boolean. If set to true, the map will be loaded from google maps China\n *                  (@see https://developers.google.com/maps/documentation/javascript/basics#GoogleMapsChina)\n *\n * Example:\n * ```\n *      import {load} from 'vue-google-maps'\n *\n *      load(<YOUR-API-KEY>)\n *\n *      load({\n *              key: <YOUR-API-KEY>,\n *      })\n *\n *      load({\n *              client: <YOUR-CLIENT-ID>,\n *              channel: <YOUR CHANNEL>\n *      })\n * ```\n */\nvar loadGmapApi = exports.loadGmapApi = function (options, loadCn) {\n  if (typeof document === 'undefined') {\n    // Do nothing if run from server-side\n    return;\n  }\n  if (!isApiSetUp) {\n    isApiSetUp = true;\n    var googleMapScript = document.createElement('SCRIPT');\n\n    // Allow options to be an object.\n    // This is to support more esoteric means of loading Google Maps,\n    // such as Google for business\n    // https://developers.google.com/maps/documentation/javascript/get-api-key#premium-auth\n    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {\n      throw new Error('options should  be an object');\n    }\n\n    // libraries\n    if (Array.prototype.isPrototypeOf(options.libraries)) {\n      options.libraries = options.libraries.join(',');\n    }\n    options['callback'] = 'vueGoogleMapsInit';\n    var baseUrl = 'https://maps.googleapis.com/';\n    if (typeof loadCn === 'boolean' && loadCn === true) {\n      baseUrl = 'https://maps.google.cn/';\n    }\n    var url = baseUrl + 'maps/api/js?' + Object.keys(options).map(function (key) {\n      return encodeURIComponent(key) + '=' + encodeURIComponent(options[key]);\n    }).join('&');\n    googleMapScript.setAttribute('src', url);\n    googleMapScript.setAttribute('async', '');\n    googleMapScript.setAttribute('defer', '');\n    document.head.appendChild(googleMapScript);\n  } else {\n    throw new Error('You already started the loading of google maps');\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","isApiSetUp","loadGmapApi","options","loadCn","document","googleMapScript","createElement","Error","Array","isPrototypeOf","libraries","join","baseUrl","url","keys","map","key","encodeURIComponent","setAttribute","head","appendChild"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/homabaytest/county-biller/node_modules/vue2-google-maps/dist/manager.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar isApiSetUp = false;\n\n/**\n * @param apiKey    API Key, or object with the URL parameters. For example\n *                  to use Google Maps Premium API, pass\n *                    `{ client: <YOUR-CLIENT-ID> }`.\n *                  You may pass the libraries and/or version (as `v`) parameter into\n *                  this parameter and skip the next two parameters\n * @param version   Google Maps version\n * @param libraries Libraries to load (@see\n *                  https://developers.google.com/maps/documentation/javascript/libraries)\n * @param loadCn    Boolean. If set to true, the map will be loaded from google maps China\n *                  (@see https://developers.google.com/maps/documentation/javascript/basics#GoogleMapsChina)\n *\n * Example:\n * ```\n *      import {load} from 'vue-google-maps'\n *\n *      load(<YOUR-API-KEY>)\n *\n *      load({\n *              key: <YOUR-API-KEY>,\n *      })\n *\n *      load({\n *              client: <YOUR-CLIENT-ID>,\n *              channel: <YOUR CHANNEL>\n *      })\n * ```\n */\nvar loadGmapApi = exports.loadGmapApi = function (options, loadCn) {\n  if (typeof document === 'undefined') {\n    // Do nothing if run from server-side\n    return;\n  }\n  if (!isApiSetUp) {\n    isApiSetUp = true;\n\n    var googleMapScript = document.createElement('SCRIPT');\n\n    // Allow options to be an object.\n    // This is to support more esoteric means of loading Google Maps,\n    // such as Google for business\n    // https://developers.google.com/maps/documentation/javascript/get-api-key#premium-auth\n    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {\n      throw new Error('options should  be an object');\n    }\n\n    // libraries\n    if (Array.prototype.isPrototypeOf(options.libraries)) {\n      options.libraries = options.libraries.join(',');\n    }\n    options['callback'] = 'vueGoogleMapsInit';\n\n    var baseUrl = 'https://maps.googleapis.com/';\n\n    if (typeof loadCn === 'boolean' && loadCn === true) {\n      baseUrl = 'https://maps.google.cn/';\n    }\n\n    var url = baseUrl + 'maps/api/js?' + Object.keys(options).map(function (key) {\n      return encodeURIComponent(key) + '=' + encodeURIComponent(options[key]);\n    }).join('&');\n\n    googleMapScript.setAttribute('src', url);\n    googleMapScript.setAttribute('async', '');\n    googleMapScript.setAttribute('defer', '');\n    document.head.appendChild(googleMapScript);\n  } else {\n    throw new Error('You already started the loading of google maps');\n  }\n};"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,IAAIC,OAAO,GAAG,OAAOC,MAAM,KAAK,UAAU,IAAI,OAAOA,MAAM,CAACC,QAAQ,KAAK,QAAQ,GAAG,UAAUC,GAAG,EAAE;EAAE,OAAO,OAAOA,GAAG;AAAE,CAAC,GAAG,UAAUA,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAI,OAAOF,MAAM,KAAK,UAAU,IAAIE,GAAG,CAACC,WAAW,KAAKH,MAAM,IAAIE,GAAG,KAAKF,MAAM,CAACI,SAAS,GAAG,QAAQ,GAAG,OAAOF,GAAG;AAAE,CAAC;AAE5Q,IAAIG,UAAU,GAAG,KAAK;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAGT,OAAO,CAACS,WAAW,GAAG,UAAUC,OAAO,EAAEC,MAAM,EAAE;EACjE,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;IACnC;IACA;EACF;EACA,IAAI,CAACJ,UAAU,EAAE;IACfA,UAAU,GAAG,IAAI;IAEjB,IAAIK,eAAe,GAAGD,QAAQ,CAACE,aAAa,CAAC,QAAQ,CAAC;;IAEtD;IACA;IACA;IACA;IACA,IAAI,CAAC,OAAOJ,OAAO,KAAK,WAAW,GAAG,WAAW,GAAGR,OAAO,CAACQ,OAAO,CAAC,MAAM,QAAQ,EAAE;MAClF,MAAM,IAAIK,KAAK,CAAC,8BAA8B,CAAC;IACjD;;IAEA;IACA,IAAIC,KAAK,CAACT,SAAS,CAACU,aAAa,CAACP,OAAO,CAACQ,SAAS,CAAC,EAAE;MACpDR,OAAO,CAACQ,SAAS,GAAGR,OAAO,CAACQ,SAAS,CAACC,IAAI,CAAC,GAAG,CAAC;IACjD;IACAT,OAAO,CAAC,UAAU,CAAC,GAAG,mBAAmB;IAEzC,IAAIU,OAAO,GAAG,8BAA8B;IAE5C,IAAI,OAAOT,MAAM,KAAK,SAAS,IAAIA,MAAM,KAAK,IAAI,EAAE;MAClDS,OAAO,GAAG,yBAAyB;IACrC;IAEA,IAAIC,GAAG,GAAGD,OAAO,GAAG,cAAc,GAAGtB,MAAM,CAACwB,IAAI,CAACZ,OAAO,CAAC,CAACa,GAAG,CAAC,UAAUC,GAAG,EAAE;MAC3E,OAAOC,kBAAkB,CAACD,GAAG,CAAC,GAAG,GAAG,GAAGC,kBAAkB,CAACf,OAAO,CAACc,GAAG,CAAC,CAAC;IACzE,CAAC,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC;IAEZN,eAAe,CAACa,YAAY,CAAC,KAAK,EAAEL,GAAG,CAAC;IACxCR,eAAe,CAACa,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC;IACzCb,eAAe,CAACa,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC;IACzCd,QAAQ,CAACe,IAAI,CAACC,WAAW,CAACf,eAAe,CAAC;EAC5C,CAAC,MAAM;IACL,MAAM,IAAIE,KAAK,CAAC,gDAAgD,CAAC;EACnE;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}